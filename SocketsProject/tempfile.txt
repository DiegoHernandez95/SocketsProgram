import socket
import subprocess
import os

# HOW TO RUN
# python server.py 1234
# then run Sockets.py with server name and port number

# The port on which to listen
listenPort = 1234

# Function to receive the specified number of bytes from the specified socket
def recvAll(sock, num_bytes):
    
    # The buffer
    recv_buff = ""
    
    # Keep receiving till all is received
    while len(recv_buff) < num_bytes:
        
        # Attempt to receive bytes
        tmp_buff = sock.recv(num_bytes - len(recv_buff))
        
        # The other side has closed the socket
        if not tmp_buff:
            break
        
        #Add the received bytes to the buffer
        recv_buff += tmp_buff
        
    return recv_buff

# Create a welcome socket
welcome_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the port
welcome_sock.bind(('', listenPort))

# Start listening on the socket
welcome_sock.listen(1)

# Function to handle client requests
def handle_client(client_sock):
    # Receive command from the client and convert to lowercase
    command = client_sock.recv(1024).decode().lower()

    if command == "quit":
        return False  # Terminate the session

    # looking up current directory commands are different depending
    # on operating systems, I'm writing on windows so dir is needed
    elif command == "ls":
        if os.name == 'nt':
            ls_output = subprocess.getoutput('dir')
        else:  
            ls_output = subprocess.getoutput('ls -l')
        client_sock.sendall(ls_output.encode())

    elif command.startswith("get"):
        # Parse the file name from the command
        file_name = command.split()[1]

        # Open the file and get the size
        # Send the size then the data to the client
        try:
            with open(file_name, 'rb') as file:
                file_size = os.path.getsize(file_name)
                client_sock.sendall(str(file_size).encode())
                while True:
                    data = file.read(1024)
                    if not data:
                        break
                    client_sock.sendall(data)
        except FileNotFoundError:
            client_sock.sendall("File not found".encode())

    # Get the file name and size then send an Acknowledgement
    elif command.startswith("put"):
        file_name = command.split()[1]
        file_size = int(client_sock.recv(1024).decode())
        client_sock.sendall("Ready to receive".encode())

        # Receive file data from client
        received_data = b''
        while len(received_data) < file_size:
            data = client_sock.recv(1024)
            if not data:
                break
            received_data += data

        # Write received data to file
        with open(file_name, 'wb') as file:
            file.write(received_data)
            
        # Send acknowledgment to client after receiving data
        client_sock.sendall("File received successfully".encode())
        print(data)

    else:
        # Invalid command
        client_sock.sendall("Invalid command".encode())

    return True

# Accept connections forever
while True:
    print("Waiting for connections...")
    
    # Accept connections
    client_sock, addr = welcome_sock.accept()
    
    print("Accepted connection from client:", addr)
    
    session_active = True
    while session_active:
        session_active = handle_client(client_sock)
    
    # Close our side
    client_sock.close()
